worker_processes auto;
#error_log logs/error.log info;
error_log  /usr/local/openresty/nginx/logs/error.log;
error_log  /dev/stdout warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    
    # Lua包路径
    lua_package_path "$prefix/conf/?.lua;;";
    lua_shared_dict stats 10m;
    
    # 初始化Lua模块
    init_by_lua_file conf/init.lua;
    
    # WebSocket支持的Connection头映射
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    #获取用户真实IP，并赋值给变量$clientRealIP
    map $http_x_forwarded_for  $clientRealIp {
        ""      $remote_addr;
        ~^(?P<firstAddr>[0-9\.]+),?.*$  $firstAddr;
    }

    # 时间格式处理
    map "$time_iso8601 # $msec" $time_iso8601_ms { 
        "~(^[^+]+)(\+[0-9:]+) # \d+\.(\d+)$" $1.$3$2;
    }

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    log_format access_json_log escape=json
        '{"timestamp":"$time_iso8601_ms",'
        '"server_ip":"$server_addr",'
        '"remote_ip":"$remote_addr",'
        '"xff":"$http_x_forwarded_for",'
        '"remote_user":"$remote_user",'
        '"domain":"$host",'
        '"url":"$request_uri",'
        '"referer":"$http_referer",'
        '"upstreamtime":"$upstream_response_time",'
        '"responsetime":"$request_time",'
        '"request_method":"$request_method",'
        '"status":"$status",'
        '"response_length":"$bytes_sent",'
        '"request_length":"$request_length",'
        '"protocol":"$server_protocol",'
        '"upstreamhost":"$upstream_addr",'
        '"http_user_agent":"$http_user_agent"'
        '}';

    #log_format access_json_log  escape=json '{"@timestamp":"$time_iso8601", "host":"$host", "http_host":"$http_host", "uri":"$uri", "clientRealIp":"$clientRealIp", "proxy_add_x_forwarded_for":"$proxy_add_x_forwarded_for", "upstream_addr":"$upstream_addr", "upstream_response_time":"$upstream_response_time", "request_time":"$request_time", "request_method":"$request_method", "request":"$request", "requesturi":"$request_uri", "status":"$status", "request_length":"$request_length", "bytes_sent":"$bytes_sent", "http_user_agent":"$http_user_agent"}';

    access_log /usr/local/openresty/nginx/logs/access.log access_json_log;
    access_log /dev/stdout access_json_log;    


    server_tokens   off;
    sendfile        on;
    tcp_nopush      on;
    keepalive_timeout  120s;
    keepalive_requests 10000;
    client_body_buffer_size 8m;
    client_max_body_size  1G;
    proxy_ignore_client_abort on;
    underscores_in_headers on;
    client_header_buffer_size 2k;
    large_client_header_buffers 2 4k;
    
    fastcgi_buffers      8 4K;
    fastcgi_buffer_size  4K;

    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;
    proxy_temp_file_write_size 8k;


    # 开启gzip
    gzip on;
    # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
    gzip_min_length 1K;
    # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明
    gzip_comp_level 2;
    # 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。
    #gzip_types text/plain application/json application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;
    # 禁用IE 6 gzip
    gzip_disable "MSIE [1-6]\.";


    server {
        listen 443 ssl;
        server_name aiproxy.bwton.cn;
        
        # 证书配置
        ssl_certificate       /usr/local/openresty/nginx/conf/bwton.cn.pem;
        ssl_certificate_key   /usr/local/openresty/nginx/conf/bwton.cn.key;

        # 提高HTTPS性能
        ssl_session_timeout   5m;
        ssl_session_cache shared:SSL:10m;

        # 启用服务端算法优先
        ssl_prefer_server_ciphers   on;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;

        # DNS解析器配置
        #resolver 8.8.8.8 8.8.4.4 valid=300s ipv6=off;
        # 修改为docker网络DNS，否则LUA无法解析容器名字
        resolver 127.0.0.11 valid=300s ipv6=off;
        resolver_timeout 5s;
        
        # 定义动态代理变量
        set $proxy_pass_target "";
        set $proxy_ssl_server_name "";
        
        # 设置网站favicon
        location /favicon.ico {
           log_not_found off;
           access_log off;
        }

        # 统计页面 - JSON格式（VictoriaMetrics版本）
        location /stats {
            content_by_lua_file conf/vm_stats_page.lua;
        }
        
        # 传统统计页面 - JSON格式（兼容性）
        location /stats/legacy {
            content_by_lua_file conf/stats_page.lua;
        }
        
        # 统计仪表板 - HTML格式
        location /dashboard {
            content_by_lua_file conf/stats_dashboard.lua;
        }
        
        # VictoriaMetrics 连接测试端点
        location /test/vm {
            content_by_lua_block {
                local cjson = require "cjson"
                
                ngx.header["Content-Type"] = "application/json"
                
                -- 测试 cosocket 连接 VictoriaMetrics
                local sock = ngx.socket.tcp()
                sock:settimeout(5000)  -- 5秒超时
                
                local ok, err = sock:connect("victoriametrics", 8428)
                if not ok then
                    ngx.status = 500
                    ngx.say(cjson.encode({
                        status = "error",
                        message = "连接VictoriaMetrics失败: " .. (err or "unknown"),
                        timestamp = ngx.time()
                    }))
                    return
                end
                
                -- 发送简单的查询请求
                local request = table.concat({
                    "GET /api/v1/query?query=up HTTP/1.1",
                    "Host: victoriametrics:8428",
                    "Accept: application/json",
                    "Connection: close",
                    "",
                    ""
                }, "\r\n")
                
                local bytes, err = sock:send(request)
                if not bytes then
                    sock:close()
                    ngx.status = 500
                    ngx.say(cjson.encode({
                        status = "error",
                        message = "发送请求失败: " .. (err or "unknown"),
                        timestamp = ngx.time()
                    }))
                    return
                end
                
                -- 读取响应状态行
                local status_line, err = sock:receive()
                if not status_line then
                    sock:close()
                    ngx.status = 500
                    ngx.say(cjson.encode({
                        status = "error",
                        message = "读取响应失败: " .. (err or "unknown"),
                        timestamp = ngx.time()
                    }))
                    return
                end
                
                sock:close()
                
                -- 解析状态码
                local status_code = status_line:match("HTTP/%d+%.%d+ (%d+)")
                
                ngx.say(cjson.encode({
                    status = "success",
                    message = "VictoriaMetrics连接测试成功",
                    http_status = status_code or "unknown",
                    response_line = status_line,
                    timestamp = ngx.time()
                }))
            }
        }
        
        # VictoriaMetrics 健康检查（简化版本）
        location /health/vm {
            content_by_lua_block {
                local cjson = require "cjson"
                
                ngx.header["Content-Type"] = "application/json"
                
                -- 简化的健康检查：检查服务是否在运行
                local health = {
                    status = "ok",
                    message = "VictoriaMetrics 集成已启用",
                    timestamp = ngx.time(),
                    components = {
                        victoriametrics = "enabled",
                        nginx_shared_memory = ngx.shared.stats and "ok" or "error",
                        api_keys = #(_G.api_keys or {})
                    }
                }
                
                ngx.say(cjson.encode(health))
            }
        }
        
        # VictoriaMetrics 代理访问
        location /vm/ {
            proxy_pass http://victoriametrics:8428/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 设置超时
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 缓冲配置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        # Grafana 代理访问
        location /grafana/ {
            proxy_pass http://grafana:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Grafana WebSocket支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # 设置超时
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 缓冲配置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        # API代理 - 支持HTTP和WebSocket
        location / {
            access_log /usr/local/openresty/nginx/logs/access_aiproxy.log access_json_log;
            
            # 增强版Key替换、渠道路由、包头设置等
            access_by_lua_file conf/enhanced_process.lua;
            
            # 记录统计
            log_by_lua_file conf/record_stats.lua;
            
            # WebSocket支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # 动态代理配置
            proxy_pass $proxy_pass_target;
            proxy_ssl_server_name on;
            proxy_ssl_name $proxy_ssl_server_name;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket超时设置
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;            
        }
    }
}
